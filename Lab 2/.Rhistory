output_2
cbind(output_1,output_2)
fnames <- list(A = c(50,10), B = c(5,-4), C = c(1,10))
output = fac.gen(generate = fnames, order="yates")
output
output_1= as.numeric(as.character(output[,1]))
output_2= as.numeric(as.character(output[,2]))
output_3= as.numeric(as.character(output[,3]))
cbind(output_1,output_2,output_3)
str(cbind(output_1,output_2,output_3))
cbind(output_1,output_2,output_3)
as.data.frame(cbind(output_1,output_2,output_3))
str(as.data.frame(cbind(output_1,output_2,output_3)))
colSums(as.data.frame(cbind(output_1,output_2,output_3)))
rowSums(as.data.frame(cbind(output_1,output_2,output_3)))
asd = as.data.frame(cbind(output_1,output_2,output_3))
asd = as.data.frame(cbind(output_1,output_2,output_3))
asd = as.data.frame(cbind(asd,rowSums(asd)))
asd
Fac4Proc.dat
Fac4Proc.dat[,1:2]
Fac4Proc.aov <- aov(Conv ~ Catal * Temp * Press * Conc + Error(Runs),
Fac4Proc.dat[,1:5])
Fac4Proc.dat
yates.effects(aov(rowSums() ~ output_1 + output_2 + output_3, data=asd))
asd = as.data.frame(cbind(asd,rowSums(asd)))
asd
yates.effects(aov(rowSums(asd) ~ output_1 + output_2 + output_3, data=asd))
yates.effects(Fac4Proc.aov, error.term="Runs", data=Fac4Proc.dat)
round(yates.effects(Fac4Proc.aov, error.term="Runs", data=Fac4Proc.dat), 2)
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates
View(df)
df_yates = rbind(df_yates,df_yates)
df_yates
df_yates["newcol"] = c(0,0,0,0,0,0,0,0)
df_yates
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates
df_yates["newcol"] = NULL
df_yates
df_yates = df_yates[c("f1","f2","f10","answer")]
df_yates
answer=c(51,50.5,47,46.5,11,10.5,7,6.5)
answer
answer=as.data.frame(c(51,50.5,47,46.5,11,10.5,7,6.5))
answer
colnames(answer) = c("answer")
answer
answer["answer",1]
answer["answer"]
answer["answer",0]
answer[1,1]
answer[1,2]
answer[2,1]
answer[2,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer
answer
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]+answer[2,"point3"],answer[3,"point3"]+answer[4,"point3"],answer[5,"point3"]+answer[6,"point3"],answer[7,"point3"]+answer[8,"point3"],answer[2,"point3"]-answer[1,"point3"],answer[4,"point3"]-answer[3,"point3"],answer[6,"point3"]-answer[5,"point3"],answer[8,"point3"]-answer[7,"point3"])
answer
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
answer
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
answer
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),0,0,max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),10,10,max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
answer[5:8]
answer
f1 = runif(10000, min = 0, max = 10)
f2 = rnorm(10000, mean = 0, sd = 10)
f3 = rexp(10000, rate = 10)
f4 = rpois(10000, lambda = 10)
f5 = rbinom(10000, 100, 0.5)
f6 = f1+2*f2
f6 = f1+2*f2 + rnorm(10000, mean=mean(f6)*runif(1,0.1,0.2), sd=sd(f6)*runif(1,0.1,0.2))
f7 = -f1
f7 = -f1 + rnorm(10000, mean=mean(f7)*runif(1,0.1,0.2), sd=sd(f7)*runif(1,0.1,0.2))
f8 = (f5 - f1 - f4)/5
f8 = (f5 - f1 - f4)/5 + rnorm(10000, mean=mean(f8)*runif(1,0.1,0.2), sd=sd(f8)*runif(1,0.1,0.2))
f9 = -f4+f2
f9 = -f4+f2 + rnorm(10000, mean=mean(f9)*runif(1,0.1,0.2), sd=sd(f9)*runif(1,0.1,0.2))
f10 = f3+f5
f10 = f3+f5 + rnorm(10000, mean=mean(f10)*runif(1,0.1,0.2), sd=sd(f10)*runif(1,0.1,0.2))
answer = f1 + f4 + f6 + f7 + f9 + rnorm(10000, mean=mean(f1 + f4 + f6 + f7 + f9)*runif(1,0.1,0.2), sd=sd(f1 + f4 + f6 + f7 + f9)*runif(1,0.1,0.2))
df = data.frame(cbind(f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,answer))
df_model = df[1:5000,]
df_test = df[5001:10000,]
summary(df_model)
plot(df_model)
PCA(df_model)
library(randtests)
library(FactoMineR)
library(lmtest)
library(dae)
PCA(df_model)
lm1 <- lm(answer ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 , # regression formula
data = df_model) # data set
summary(lm1)
lm_2 <- lm(answer ~ f1 + f4 + f6 + f7 + f9, # regression formula
data=df_model) # data set
summary(lm_2)
summary(lm(f2 ~ f1 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f6 ~ f1 + f2 + f3 + f4 + f5 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f9 ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f10, data=df_model))
summary(lm(f2 ~ f1 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f6 ~ f1 + f2 + f3 + f4 + f5 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f9 ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f10, data=df_model))
lm_4 <- lm(answer ~ f1 + f2 + f4, # regression formula
data=df_model) # data set
summary(lm_4)
lm_5 <- lm(answer ~ f1 + f2, # regression formula
data=df_model) # data set
summary(lm_5)
df_test_use_2 = df_test[,c("f1","f4","f6","f7","f9")]
predict_output_2 = data.frame(predict(lm_2, newdata=df_test_use_2, interval="prediction"))
predict_output_realdata_2=cbind(predict_output_2, df_test[,"answer"])
colnames(predict_output_realdata_2) = c("fit", "lwr", "upr", "real")
inside_range_predict_2 = with(predict_output_realdata_2, real <= upr & real >= lwr)
no_true_predict_2 = sum(inside_range_predict_2, na.rm=TRUE)
len_range_predict_2 = length(inside_range_predict_2)
percentage_of_acceptance_predict_2 = no_true_predict_2/len_range_predict_2
percentage_of_acceptance_predict_2
df_test_use_2 = df_test[,c("f1","f4","f6","f7","f9")]
predict_output_2 = data.frame(predict(lm_2, newdata=df_test_use_2, interval="prediction"))
predict_output_realdata_2=cbind(predict_output_2, df_test[,"answer"])
colnames(predict_output_realdata_2) = c("fit", "lwr", "upr", "real")
inside_range_predict_2 = with(predict_output_realdata_2, real <= upr & real >= lwr)
no_true_predict_2 = sum(inside_range_predict_2, na.rm=TRUE)
len_range_predict_2 = length(inside_range_predict_2)
percentage_of_acceptance_predict_2 = no_true_predict_2/len_range_predict_2
percentage_of_acceptance_predict_2
df_test_use_5 = df_test[,c("f1","f2")]
predict_output_5 = data.frame(predict(lm_5, newdata=df_test_use_5, interval="prediction"))
predict_output_realdata_5=cbind(predict_output_5, df_test[,"answer"])
colnames(predict_output_realdata_5) = c("fit", "lwr", "upr", "real")
inside_range_predict_5 = with(predict_output_realdata_5, real <= upr & real >= lwr)
no_true_predict_5 = sum(inside_range_predict_5, na.rm=TRUE)
len_range_predict_5 = length(inside_range_predict_5)
percentage_of_acceptance_predict_5 = no_true_predict_5/len_range_predict_5
percentage_of_acceptance_predict_5
dwtest(lm_5, alternative = "two.sided")
shapiro.test(lm_5$residuals)
lmtest::bptest(lm_5)
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
fit7_DOE <- lm(answer ~f1+f2+f10,data=df_yates)
summary(fit7_DOE)
summary(dwtest(lm5_DOE, alternative = "two.sided"))
lm5_DOE <- lm(answer ~f1+f2+f10,data=df_yates)
summary(lm5_DOE)
summary(dwtest(lm5_DOE, alternative = "two.sided"))
dwtest(lm5_DOE, alternative = "two.sided")
shapiro.test(lm5_DOE$residuals[0:5000])
lmtest::bptest(fit7_DOE)
dwtest(lm5_DOE, alternative = "two.sided")
shapiro.test(lm5_DOE$residuals[0:5000])
shapiro.test(lm5_DOE$residuals)
lmtest::bptest(fit7_DOE)
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
rweibull(n=10000, shape = a, scale = b )
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
par(mfrow=c(2,1), mar=c(4,4,4,4))
par(mfrow=c(2,1), mar=c(4,4,4,4))
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=100, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
mean_theoretical = b * gamma(1+1/a)
var_theoretical = b^2 * (gamma(1+2/a) - (gamma(1+1/a))^2 )
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=100, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), col='red')
hist(X,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(X,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,300), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,300), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,100), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,100), col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
mean_theoretical = b * gamma(1+1/a)
var_theoretical = b^2 * (gamma(1+2/a) - (gamma(1+1/a))^2 )
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
mean_samples
mean_theoretical
var_samples
var_theoretical
samples = rweibull(n=10000, shape = a, scale = b )
var_samples=var(samples)
var_theoretical
samples = rweibull(n=10000, shape = a, scale = b )
var_samples=var(samples)
var_samples
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
p=[0.4 0.7 0.85 0.925]
p=[0.4, 0.7, 0.85, 0.925]
p=(0.4, 0.7, 0.85, 0.925)
p=c(0.4, 0.7, 0.85, 0.925)
p
N = 100000
setwd("~/Documents/Machine Learning/Lab 1")
Credit <- read.csv("credsco.csv", header = TRUE, quote = "\"", dec = ".", check.names=TRUE)
dim(Credit)
names(Credit)
Credit[1:4,]
Credit[1,5:8]
summary(Credit)
Credit.complete <- na.omit(Credit)
dim(Credit.complete)
table(Credit[,1]==0)
table(Credit[,3]==0)
table(Credit[,6]==0)
table(Credit[,8]==0)
Credit <- Credit[Credit[,1] != 0 & Credit[,3] != 0 & Credit[,6] != 0 & Credit[,8] != 0,]
dim(Credit)
attach(Credit)
hist(Income)
hist(Income[Income != 99999999])
hist(Income[Income != 99999999 & Income != 0], breaks=15)
table(Income == 99999999)
table(Income == 0)
table(Capital == 99999999)
table(ChargesOnCapital == 99999999)
table(YearsInJob == 0)
Income[Income == 99999999 | Income == 0] <- NA
Capital[Capital == 99999999] <- NA
ChargesOnCapital[ChargesOnCapital == 99999999] <- NA
summary(Credit[,10])
summary(Income)
library(class) # 1NN imputation
aux <- Credit[,-10]
dim(aux)
aux1 <- aux[!is.na(Income),]
dim(aux1)
aux2 <- aux[is.na(Income),]
dim(aux2)
knn.inc <- knn(aux1,aux2,Income[!is.na(Income)])
Income[is.na(Income)] <- as.numeric(as.character(knn.inc))
?knn
aux <- Credit[,-11]
aux1 <- aux[!is.na(Capital),]
aux2 <- aux[is.na(Capital),]
knn.cap <- knn(aux1,aux2,Capital[!is.na(Capital)])
Capital[is.na(Capital)] <- as.numeric(as.character(knn.cap))
aux <- Credit[,-12]
aux1 <- aux[!is.na(ChargesOnCapital),]
aux2 <- aux[is.na(ChargesOnCapital),]
knn.cac <- knn(aux1,aux2, ChargesOnCapital[!is.na(ChargesOnCapital)])
ChargesOnCapital[is.na(ChargesOnCapital)] <- as.numeric(as.character(knn.cac))
ChargesOnCapital[Capital==0] <- 0
Credit[,10] <- Income
Credit[,11] <- Capital
Credit[,12] <- ChargesOnCapital
dim(Credit)
summary(Credit)
clear
clear()
graphics.off()      # reset/close all graphical devices
Auto <- read.table("Auto.data", header=TRUE, na.strings="?")
View(Auto)
View(Auto)
View(Auto)
Auto[,"origin"] <- factor(c("USA","EU","Japan")[Auto[,"origin"]])
View(Auto)
Auto[,"mpg"] <- 235.4/Auto[,"mpg"]
colnames(Auto)[1] <- "L100km"
set.seed(2222)
par(mfrow=c(1, 1))
N <- 10
(X <- matrix(c(rep(1,N), seq(N)),nrow=N))
View(X)
(t <- seq(10,20,length.out=N) + rnorm(N))
plot(X[,2],t,lwd=3)
setwd("~/Documents/Machine Learning/Lab 2")
(C <- t(X) %*% X)                   # X^T X
View(C)
t(x)
t(X)
t(X) * X
X
t(X) %*% X
t
X
t(X)
C
solve(C)
(X.pseudo <- solve(C) %*% t(X))       # (X^T X)^{-1} X^T
X.pseudo %*% X
(w <- X.pseudo %*% t)
X.pseudo
t
X
X.pseudo %*% X
(w <- X.pseudo %*% t)
X.pseudo %*% X
(w <- X.pseudo %*% t)
lines (X[,2], w[2,1]*X[,2]+w[1,1], type="l")
(s <- svd(X))
D <- diag(s$d)
s$u %*% D %*% t(s$v) # this should be equal to X
D <- diag(1/s$d)
w.svd <- s$v %*% D %*% t(s$u) %*% t
w.svd
lines (X[,2], w[2,1]*X[,2]+w[1,1], type="l")
D <- diag(1/s$d)
w.svd <- s$v %*% D %*% t(s$u) %*% t
(sample <- data.frame(x=X,t=t))
sample
t
model1 <- glm (t ~ x.2 + x.1 - 1, data=sample, family = gaussian)
model1
model2 <- glm (t ~ x.2, data=sample, family = gaussian)
model2
x.2
model1$coefficients
model2$coefficients
View(sample)
eps <- 1e-3
(X.eps <- matrix(c(1,eps,0,1,0,eps),nrow=3))
D
c(1,eps,0,1,0,eps)
X.eps
(C.eps <- t(X.eps) %*% X.eps)
eps <- 1e-10
(X.eps <- matrix(c(1,eps,0,1,0,eps),nrow=3))
(C.eps <- t(X.eps) %*% X.eps)
solve(C.eps)
X.eps
X.eps
(X.eps <- matrix(c(1,eps,0,1,0,eps),nrow=3))
X
kappa(X, exact=TRUE)
kappa(t(X) %*% X, exact=TRUE)
(A <- matrix(c(rep(1,N), 100+seq(N)),nrow=N))
kappa(A, exact=TRUE)
kappa(t(A) %*% A, exact=TRUE)
A <- matrix(c(rep(1,N), 100+seq(N)),nrow=N)
A
A[,2] <- A[,2] - mean(A[,2])
A
kappa(A, exact=TRUE)
kappa(t(A) %*% A, exact=TRUE)
library(MASS)
ginv(A)
